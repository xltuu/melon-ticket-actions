# name: example

# on:
#   schedule:
#     - cron: "*/5 * * * *"
#   workflow_dispatch:

# jobs:
#   # ----------------------------------------------------
#   # 1. schedule-id 목록을 생성하는 첫 번째 작업
#   # ----------------------------------------------------
#   generate-matrix:
#     runs-on: ubuntu-latest
#     outputs:
#       # 👇 1. 작업 결과물의 이름을 'matrix_json'으로 변경
#       matrix_json: ${{ steps.set_matrix.outputs.id_list }}
    
#     steps:
#     - id: set_matrix
#       name: Generate schedule-id list
#       run: |
#         # 👇 2. 스텝 결과물의 이름도 하이픈 없는 'id_list'로 변경
#         # 👇 3. range의 마지막 숫자에 +1을 해야 해당 숫자까지 포함됩니다.
#         echo "id_list=$(jq -c -n '[range(100001; 100441)]')" >> $GITHUB_OUTPUT

#   # ----------------------------------------------------
#   # 2. 생성된 목록으로 티켓을 확인하는 두 번째 작업
#   # ----------------------------------------------------
#   check-tickets:
#     needs: generate-matrix
#     runs-on: ubuntu-latest
#     timeout-minutes: 5

#     strategy:
#       fail-fast: false
#       matrix:
#         # 👇 4. 위에서 변경한 결과물 이름(matrix_json)을 가져와 사용
#         schedule-id: ${{ fromJSON(needs.generate-matrix.outputs.matrix_json) }}

#     steps:
#       - name: Check Tickets
#         uses: xltuu/melon-ticket-actions@master
#         with:
#           product-id: 211942
#           schedule-id: ${{ matrix.schedule-id }}
#           seat-id: "1_0"
#           slack-incoming-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
#           message: '<@U4CF18RKL> 티켓사세요! (회차: ${{ matrix.schedule-id }})'

name: example

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  # ----------------------------------------------------
  # 1. schedule-id 목록을 두 개의 덩어리로 생성하는 작업
  # ----------------------------------------------------
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_json_1: ${{ steps.set_matrix.outputs.id_list_1 }}
      matrix_json_2: ${{ steps.set_matrix.outputs.id_list_2 }}
    
    steps:
    - id: set_matrix
      name: Generate schedule-id lists
      run: |
        # jq의 배열 슬라이싱을 이용해 전체 목록을 두 개로 나눕니다.
        echo "id_list_1=$(jq -c -n '[range(100001; 100440 + 1)] | .[0:220]')" >> $GITHUB_OUTPUT
        echo "id_list_2=$(jq -c -n '[range(100001; 100440 + 1)] | .[220:]')" >> $GITHUB_OUTPUT

  # ----------------------------------------------------
  # 2. 첫 번째 목록으로 티켓을 확인하는 작업
  # ----------------------------------------------------
  check-tickets-1:
    needs: generate-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        schedule-id: ${{ fromJSON(needs.generate-matrix.outputs.matrix_json_1) }}

    steps:
      - name: Check Tickets (Part 1)
        uses: xltuu/melon-ticket-actions@master
        with:
          product-id: 211942
          schedule-id: ${{ matrix.schedule-id }}
          seat-id: "1_0"
          slack-incoming-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: '<@U4CF18RKL> 티켓사세요! (회차: ${{ matrix.schedule-id }})'

  # ----------------------------------------------------
  # 3. 두 번째 목록으로 티켓을 확인하는 작업
  # ----------------------------------------------------
  check-tickets-2:
    needs: generate-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        schedule-id: ${{ fromJSON(needs.generate-matrix.outputs.matrix_json_2) }}

    steps:
      - name: Check Tickets (Part 2)
        uses: xltuu/melon-ticket-actions@master
        with:
          product-id: 211942
          schedule-id: ${{ matrix.schedule-id }}
          seat-id: "1_0"
          slack-incoming-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: '<@U4CF18RKL> 티켓사세요! (회차: ${{ matrix.schedule-id }})'
